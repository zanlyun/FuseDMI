main =  const 5;
main =  5;
main =  let x = const 5 in const x;
main =  let x = 5 in const x;
main =  let x = const 5 in  x;
main =  let x = 5 in  x;
main = (const \x->x) (const 1);
main = let y = const 1 in (const \x->x) (const y);
main = let y = const 1 in (const \x->x) y;
main = let y = 1 in (const \x->x) y;
main = (const \x->x) 1;
main = let y = const 1 in (\x->x) (const y);
main = let y = 1 in (\x->x) (const y);
main =(\x->x) (const 1);
main = let y = const 1 in (\x->x) y;
main = let y = 1 in (\x->x)  y;
main =(\x->x) 1;
main = const (1+2);
main = let y = const 2 in const (const 1+ const y);
main = let x = const 2 in const (const x + x);
main = let x = const 1 in let y = 2 in const (x + y);
main = let y = const 1 in const 1 + const y;
main = const (case 1 of 1 -> 1 | 2 -> 2);
main = const (case (1,const 1) of (1, x) -> 1 | (2,x) -> x*2);
main = const (case (1,const 1) of (1, x) -> x | (2,x) -> x*2);
main = case (1,const 1) of (1, x) -> x | (2,x) -> x*2;
main = let y = const 1 in case const y of 1 -> y+1 | 1 -> y+2;
main = case (1, const 1) of (1, x) -> const x | (2, x) -> x*2;
main = case (1, y+1) of (1, x) -> const x | (2, x) -> x*2;
main = let y = const 1 in case (1, y+1) of (1, x) -> const x | (2, x) -> x*2;
main = let y = const 1 in case y+1 of 1 -> const y | 2 -> y+2;
main = case (1, const 1) of (1,x) -> x | (2,x) -> x*2;
main = let x =  1 in const (x::[]);
main = const 1:: const [];
main =  1:: const [];
main =  let x = const 1 in  x:: const [];
main =  let x = const 1 in  const x:: const [];
main =  const 1:: const (2 :: []);
main =  let x = const 1 in  const x:: (x :: []);